{"version":3,"file":"static/js/357.50258bdb.chunk.js","mappings":"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","sources":["components/carga_tipologias.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Swal from \"sweetalert2\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Plantilla from './plantilla_carga_tipologias.xlsx';\r\n\r\nconst App = () => {\r\n  const [loaderVisible, setLoaderVisible] = useState(false);\r\n  const [file, setFile] = useState(null);\r\n\r\n  const getUrlParams = () => {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const id = params.get(\"id\");\r\n    const campana = params.get(\"campana\");\r\n\r\n    if (!id || !campana) {\r\n      throw new Error(\"Faltan parámetros en la URL.\");\r\n    }\r\n\r\n    return { id, campana };\r\n  };\r\n\r\n  const decrypt = async (value) => {\r\n    if (!value || value.trim() === \"\") {\r\n      throw new Error(\"El valor encriptado está vacío o es inválido.\");\r\n    }\r\n\r\n    const response = await fetch(\"http://192.52.242.238:8000/api/decrypt\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ encrypted_value: value }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Error al desencriptar: ${errorText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    if (!data.decrypted_value) {\r\n      throw new Error(\"La API no devolvió un valor desencriptado.\");\r\n    }\r\n\r\n    return data.decrypted_value;\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    setFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleDownloadTemplate = () => {\r\n    const link = document.createElement(\"a\");\r\n    link.href = Plantilla;\r\n    link.download = \"plantilla_carga_tipologias.xlsx\";\r\n    link.click();\r\n  };\r\n\r\n  const handleUploadFile = async () => {\r\n    if (!file) {\r\n      return Swal.fire(\"Error\", \"Debe seleccionar un archivo.\", \"error\");\r\n    }\r\n\r\n    if (!file.name.endsWith(\".xlsx\")) {\r\n      return Swal.fire(\"Error\", \"El archivo debe ser un archivo Excel (.xlsx).\", \"error\");\r\n    }\r\n\r\n    setLoaderVisible(true);\r\n\r\n    try {\r\n      const urlParams = getUrlParams();\r\n      const idCampana = await decrypt(urlParams.campana);\r\n      const usuarioOperacion = await decrypt(urlParams.id);\r\n\r\n      const reader = new FileReader();\r\n      reader.onload = async (event) => {\r\n        const data = new Uint8Array(event.target.result);\r\n        const workbook = window.XLSX.read(data, { type: \"array\" });\r\n        const sheetName = workbook.SheetNames[0];\r\n        const rows = window.XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], { header: 1 });\r\n\r\n        if (!rows || rows.length <= 1) {\r\n          setLoaderVisible(false);\r\n          return Swal.fire(\"Error\", \"El archivo Excel no contiene filas de datos.\", \"error\");\r\n        }\r\n\r\n        const dataRows = rows.slice(1).filter((row) => row.some((cell) => cell !== null && cell !== undefined && cell.toString().trim() !== \"\"));\r\n\r\n        if (dataRows.length === 0) {\r\n          setLoaderVisible(false);\r\n          return Swal.fire(\"Error\", \"El archivo Excel no contiene datos válidos.\", \"error\");\r\n        }\r\n\r\n        for (let row of dataRows) {\r\n          const body = {\r\n            id_campana: parseInt(idCampana) || null,\r\n            usuario_operacion: parseInt(usuarioOperacion) || null,\r\n            // Otros datos a procesar aquí\r\n          };\r\n\r\n          const response = await fetch(\"http://192.52.242.238:8000/api/gestiones\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify(body),\r\n          });\r\n\r\n          if (!response.ok) {\r\n            throw new Error(`Error en la carga: ${response.statusText}`);\r\n          }\r\n        }\r\n\r\n        setLoaderVisible(false);\r\n        Swal.fire(\"Éxito\", \"Archivo procesado correctamente.\", \"success\");\r\n      };\r\n\r\n      reader.readAsArrayBuffer(file);\r\n    } catch (error) {\r\n      setLoaderVisible(false);\r\n      Swal.fire(\"Error\", error.message, \"error\");\r\n    }\r\n  };\r\n\r\n  const handleBackToPanel = () => {\r\n    const urlParams = getUrlParams();\r\n    window.location.href = `./modulos?id=${urlParams.id}&campana=${urlParams.campana}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"card\">\r\n        <div className=\"card-header text-center\">\r\n          <h4>Carga de Gestiones</h4>\r\n          <button className=\"btn btn-warning\" onClick={handleBackToPanel}>\r\n            Regresar al panel de modulos\r\n          </button>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <div className=\"mb-3\">\r\n            <button className=\"btn btn-primary\" onClick={handleDownloadTemplate}>\r\n              Descargar Plantilla\r\n            </button>\r\n          </div>\r\n          <form>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"fileInput\" className=\"form-label\">\r\n                Subir archivo Excel\r\n              </label>\r\n              <input type=\"file\" className=\"form-control\" id=\"fileInput\" accept=\".xlsx\" onChange={handleFileChange} />\r\n            </div>\r\n            <button type=\"button\" className=\"btn btn-success\" onClick={handleUploadFile}>\r\n              Cargar\r\n            </button>\r\n          </form>\r\n          {loaderVisible && <div className=\"loader mt-3\"></div>}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"names":["App","loaderVisible","setLoaderVisible","useState","file","setFile","getUrlParams","params","URLSearchParams","window","location","search","id","get","campana","Error","decrypt","async","value","trim","response","fetch","method","headers","body","JSON","stringify","encrypted_value","ok","errorText","text","data","json","decrypted_value","_jsx","className","children","_jsxs","onClick","handleBackToPanel","urlParams","href","handleDownloadTemplate","link","document","createElement","Plantilla","download","click","htmlFor","type","accept","onChange","event","target","files","Swal","name","endsWith","idCampana","usuarioOperacion","reader","FileReader","onload","Uint8Array","result","workbook","XLSX","read","sheetName","SheetNames","rows","utils","sheet_to_json","Sheets","header","length","dataRows","slice","filter","row","some","cell","undefined","toString","id_campana","parseInt","usuario_operacion","statusText","readAsArrayBuffer","error","message"],"sourceRoot":""}